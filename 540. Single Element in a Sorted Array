static const bool ins= []()
{
std:ios_base::sync_with_stdio(false);
    std::cout.tie(nullptr) ;
    std::cin.tie(nullptr) ;
    return true;
}();

class Solution {
public:
    int singleNonDuplicate(vector<int>& nums) {
        int start = 0;
        int end = nums.size()-1;
        
        if(nums.size() == 1){
            return nums[0];
        }
        while(start <= end){
            int mid = start + (end - start / 2);

            if(mid == 0 && nums[mid] != nums[1]){
                return nums[0];
            }
            if(mid == nums.size()-1  && nums[mid] != nums[mid-1]){
                return nums[nums.size()-1];
            }


            if( nums[mid -1] != nums[mid]  && nums[mid] != nums[mid+1]){
                return nums[mid];
            }

            if(mid %2 == 0){
                if(nums[mid-1] == nums[mid]){
                    end = mid-1;
                }
                else{
                    start = mid + 1;
                }
            }

            else{
                if(nums[mid-1] == nums[mid]){
                    start = mid+1;
                }
                else{
                    end =mid-1;
                }
            }
        }
        return -1;
    }
};


// BRUTE FORCE APPROACH
// if(nums.size() == 1){
//             return nums[0];
//         }
//         int j = 0;
//         for(int i = 1; i<=nums.size(); i+=2){
//             if(nums[i]-nums[j]==0){
//                 j+=2;
//             }
//             else{
//                 return nums[j];
//             }
//         }
//         return -1;
